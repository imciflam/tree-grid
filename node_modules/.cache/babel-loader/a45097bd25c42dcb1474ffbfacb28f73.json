{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Marina.Vitalia\\\\source\\\\repos\\\\tree-grid\\\\src\\\\components\\\\TreeListItem\\\\TreeListItem.tsx\";\nimport React, { Component } from \"react\";\nimport \"./TreeListItem.css\";\nimport axios from \"axios\";\nexport class TreeListItem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPopup: false,\n      itemChildData: []\n    };\n  }\n\n  getChildren(id) {\n    axios.get(`https://5e4a36256eafb7001488c115.mockapi.io/elements`).then(response => {\n      const childData = response.data.filter(element => element.parentId === id);\n      this.setState({\n        showPopup: !this.state.showPopup,\n        itemChildData: childData\n      });\n\n      if (childData.length === 0) {\n        alert(\"this item has no children\");\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"tree-list__item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"tree-list__button\",\n      onClick: () => this.getChildren(this.props.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"\\u2BA1\"), React.createElement(\"span\", {\n      className: \"tree-list__text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, this.props.name), this.state.showPopup && this.state.itemChildData ? this.state.itemChildData.map(element => {\n      return React.createElement(TreeListItem, {\n        key: element.id,\n        id: element.id,\n        name: element.name,\n        parentId: element.parentId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      });\n    }) : \"\");\n  }\n\n}\nexport default TreeListItem;","map":{"version":3,"sources":["C:/Users/Marina.Vitalia/source/repos/tree-grid/src/components/TreeListItem/TreeListItem.tsx"],"names":["React","Component","axios","TreeListItem","constructor","props","state","showPopup","itemChildData","getChildren","id","get","then","response","childData","data","filter","element","parentId","setState","length","alert","catch","error","console","log","render","name","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,oBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,YAAN,SAA2BF,SAA3B,CAA+C;AAC7CG,EAAAA,WAAP,CAAmBC,KAAnB,EAA+B;AAC7B,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,KADA;AAEXC,MAAAA,aAAa,EAAE;AAFJ,KAAb;AAID;;AAEMC,EAAAA,WAAP,CAAmBC,EAAnB,EAA+B;AAC7BR,IAAAA,KAAK,CACFS,GADH,CACQ,sDADR,EAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChB,YAAMC,SAAS,GAAGD,QAAQ,CAACE,IAAT,CAAcC,MAAd,CACfC,OAAD,IAAkBA,OAAO,CAACC,QAAR,KAAqBR,EADvB,CAAlB;AAGA,WAAKS,QAAL,CAAc;AACZZ,QAAAA,SAAS,EAAE,CAAC,KAAKD,KAAL,CAAWC,SADX;AAEZC,QAAAA,aAAa,EAAEM;AAFH,OAAd;;AAIA,UAAIA,SAAS,CAACM,MAAV,KAAqB,CAAzB,EAA4B;AAC1BC,QAAAA,KAAK,CAAC,2BAAD,CAAL;AACD;AACF,KAbH,EAcGC,KAdH,CAcUC,KAAD,IAAgB;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAhBH;AAiBD;;AAEDG,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,SAAS,EAAC,mBADZ;AAEE,MAAA,OAAO,EAAE,MAAM,KAAKjB,WAAL,CAAiB,KAAKJ,KAAL,CAAWK,EAA5B,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAOE;AAAM,MAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmC,KAAKL,KAAL,CAAWsB,IAA9C,CAPF,EAQG,KAAKrB,KAAL,CAAWC,SAAX,IAAwB,KAAKD,KAAL,CAAWE,aAAnC,GACG,KAAKF,KAAL,CAAWE,aAAX,CAAyBoB,GAAzB,CAA8BX,OAAD,IAAkB;AAC7C,aACE,oBAAC,YAAD;AACE,QAAA,GAAG,EAAEA,OAAO,CAACP,EADf;AAEE,QAAA,EAAE,EAAEO,OAAO,CAACP,EAFd;AAGE,QAAA,IAAI,EAAEO,OAAO,CAACU,IAHhB;AAIE,QAAA,QAAQ,EAAEV,OAAO,CAACC,QAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAQD,KATD,CADH,GAWG,EAnBN,CADF;AAuBD;;AArDmD;AAwDtD,eAAef,YAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./TreeListItem.css\";\r\nimport axios from \"axios\";\r\n\r\nexport class TreeListItem extends Component<any, any> {\r\n  public constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      showPopup: false,\r\n      itemChildData: []\r\n    };\r\n  }\r\n\r\n  public getChildren(id: number) {\r\n    axios\r\n      .get(`https://5e4a36256eafb7001488c115.mockapi.io/elements`)\r\n      .then(response => {\r\n        const childData = response.data.filter(\r\n          (element: any) => element.parentId === id\r\n        );\r\n        this.setState({\r\n          showPopup: !this.state.showPopup,\r\n          itemChildData: childData\r\n        });\r\n        if (childData.length === 0) {\r\n          alert(\"this item has no children\");\r\n        }\r\n      })\r\n      .catch((error: any) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"tree-list__item\">\r\n        <button\r\n          className=\"tree-list__button\"\r\n          onClick={() => this.getChildren(this.props.id)}\r\n        >\r\n          тоб\r\n        </button>\r\n        <span className=\"tree-list__text\">{this.props.name}</span>\r\n        {this.state.showPopup && this.state.itemChildData\r\n          ? this.state.itemChildData.map((element: any) => {\r\n              return (\r\n                <TreeListItem\r\n                  key={element.id}\r\n                  id={element.id}\r\n                  name={element.name}\r\n                  parentId={element.parentId}\r\n                />\r\n              );\r\n            })\r\n          : \"\"}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TreeListItem;\r\n"]},"metadata":{},"sourceType":"module"}