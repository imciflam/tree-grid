{"version":3,"sources":["components/Attribute.tsx","components/Parent.tsx","components/ChildItem.tsx","components/Children.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Attribute","renderCurrent","data","result","length","element","push","style","border","padding","_Description","opacity","this","props","Component","Parent","onClick","name","entity","localStorage","getItem","axios","get","then","response","setItem","Entity","_Name","JSON","stringify","catch","error","console","log","status","alert","childrenData","parse","Fields","setState","state","Fragment","color","ChildItem","_Type","Children","substring","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2247820.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport class Attribute extends Component<any, any> {\r\n  renderCurrent = (data: any) => {\r\n    let result = [];\r\n    if (data && data.length !== 0) {\r\n      for (let element of data) {\r\n        result.push(\r\n          <div style={{ border: \"1px solid black\", padding: \"10px\" }}>\r\n            {element._Description}\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // disable onclick\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div style={{ opacity: 0.8 }}>\r\n          {this.renderCurrent(this.props.data)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Attribute;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Children from \"./Children\";\r\nimport Attribute from \"./Attribute\";\r\n\r\nexport class Parent extends Component<any, any> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = { data: [] };\r\n  }\r\n\r\n  renderCurrent = (data: any) => {\r\n    if (data && data.length !== 0) {\r\n      let result = [];\r\n      for (let element in data) {\r\n        switch (element) {\r\n          case \"Parent\":\r\n            result.push(<Parent data={data[element]} />); // bracket notation, because it's variable\r\n            break;\r\n          case \"Child\":\r\n            result.push(<Children data={data[element]} />);\r\n            break;\r\n          case \"Attribute\":\r\n            result.push(<Attribute data={data[element]} />);\r\n            break;\r\n          default:\r\n            result.push(<div>unknown</div>);\r\n            break;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  };\r\n\r\n  onClick = (name: string) => {\r\n    let entity = localStorage.getItem(name);\r\n    if (!entity) {\r\n      axios\r\n        .get(`${name}.json`)\r\n        .then(response => {\r\n          localStorage.setItem(\r\n            response.data.Entity._Name,\r\n            JSON.stringify(response.data.Entity)\r\n          );\r\n          entity = localStorage.getItem(name);\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n          if (error.response.status === 404) {\r\n            alert(\"no data for this entity\");\r\n          }\r\n        });\r\n    }\r\n    if (entity !== null) {\r\n      let parsedData = JSON.parse(entity);\r\n      let childrenData = parsedData.Fields;\r\n      this.setState({ data: childrenData });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div\r\n          style={{ color: \"blue\", border: \"1px solid black\", padding: \"10px\" }}\r\n          onClick={() => {\r\n            this.onClick(this.props.data._Name);\r\n          }}\r\n        >\r\n          {this.props.data._Description}\r\n        </div>\r\n        {this.renderCurrent(this.state.data)}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Parent;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Children from \"./Children\";\r\nimport Attribute from \"./Attribute\";\r\nimport Parent from \"./Parent\";\r\n\r\nexport class ChildItem extends Component<any, any> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = { data: [] };\r\n  }\r\n\r\n  renderCurrent = (data: any) => {\r\n    if (data && data.length !== 0) {\r\n      let result = [];\r\n      for (let element in data) {\r\n        switch (element) {\r\n          case \"Parent\":\r\n            result.push(<Parent data={data[element]} />); // bracket notation, because it's variable\r\n            break;\r\n          case \"Child\":\r\n            result.push(<Children data={data[element]} />);\r\n            break;\r\n          case \"Attribute\":\r\n            result.push(<Attribute data={data[element]} />);\r\n            break;\r\n          default:\r\n            result.push(<div>unknown</div>);\r\n            break;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  };\r\n\r\n  onClick = (name: string) => {\r\n    let entity = localStorage.getItem(name);\r\n    if (!entity) {\r\n      axios\r\n        .get(`${name}.json`)\r\n        .then(response => {\r\n          localStorage.setItem(\r\n            response.data.Entity._Name,\r\n            JSON.stringify(response.data.Entity)\r\n          );\r\n          entity = localStorage.getItem(name);\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n          if (error.response.status === 404) {\r\n            alert(\"no data for this entity\");\r\n          }\r\n        });\r\n    }\r\n    if (entity !== null) {\r\n      let parsedData = JSON.parse(entity);\r\n      let childrenData = parsedData.Fields;\r\n      this.setState({ data: childrenData });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div\r\n          style={{ border: \"1px solid black\", padding: \"10px\" }}\r\n          onClick={() => {\r\n            this.onClick(this.props._Type);\r\n          }}\r\n        >\r\n          <i>{this.props._Description}</i>\r\n        </div>\r\n        {this.renderCurrent(this.state.data)}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChildItem;\r\n","import React, { Component } from \"react\";\r\nimport ChildItem from \"./ChildItem\";\r\n\r\nexport class Children extends Component<any, any> {\r\n  renderCurrent = (data: any) => {\r\n    let result = [];\r\n    if (data && data.length !== 0) {\r\n      for (let element of data) {\r\n        result.push(\r\n          <ChildItem\r\n            _Description={element._Description}\r\n            _Type={element._Type.substring(6, element._Type.length)}\r\n          ></ChildItem>\r\n        );\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n  render() {\r\n    console.log(this.props);\r\n    return (\r\n      <div>\r\n        <div>{this.renderCurrent(this.props.data)}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Children;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Attribute from \"./components/Attribute\";\r\nimport Children from \"./components/Children\";\r\nimport Parent from \"./components/Parent\";\r\n\r\nexport class App extends Component<any, any> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = { data: [] };\r\n  }\r\n\r\n  renderCurrent = (data: any) => {\r\n    if (data && data.length !== 0) {\r\n      let result = [];\r\n      for (let element in data) {\r\n        switch (element) {\r\n          case \"Parent\":\r\n            result.push(<Parent data={data[element]} />); // bracket notation, because it's variable\r\n            break;\r\n          case \"Child\":\r\n            result.push(<Children data={data[element]} />);\r\n            break;\r\n          case \"Attribute\":\r\n            result.push(<Attribute data={data[element]} />);\r\n            break;\r\n          default:\r\n            result.push(<div>unknown</div>);\r\n            break;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  };\r\n\r\n  public componentDidMount() {\r\n    axios.get(\"GENERIC_REPORT.json\").then(response => {\r\n      this.setState({ data: response.data.Entity.Fields });\r\n      localStorage.setItem(\r\n        response.data.Entity._Name,\r\n        JSON.stringify(response.data.Entity)\r\n      );\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>{this.renderCurrent(this.state.data)}</React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport App from \"./App\"\r\nimport * as serviceWorker from \"./serviceWorker\"\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}