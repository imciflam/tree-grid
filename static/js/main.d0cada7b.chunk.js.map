{"version":3,"sources":["components/TreeNode.tsx","index.tsx","App.tsx","components/Tree.tsx","globalStoreObject.ts","serviceWorker.ts","../src lazy /^/.*$/ groupOptions: {} namespace object"],"names":["TreeNode","props","renderCurrent","data","marginData","result","Object","entries","element","value","push","key","_Index","globalStore","addToGlobalStore","getFromGlobalStore","margin","componentType","forEach","Fragment","onClick","name","state","setState","fetchEntity","filename","then","response","entityName","JSON","stringify","Entity","_Name","entityData","Fields","catch","error","console","log","alert","this","className","style","marginLeft","_Type","substring","length","_Description","Component","ReactDOM","render","document","getElementById","serviceWorker","App","globalStoreObject","React","Tree","globalStoreObj","stringEntityName","entity","parse","childName","childData","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","headers","contentType","get","status","indexOf","ready","registration","unregister","reload","registerValidSW","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","e","Error","code","ids","id","all","slice","t","keys","module","exports"],"mappings":"qNAIaA,G,MAAb,kDACE,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IAkBRC,cAAgB,SAACC,EAAWC,GAC1B,GAAID,GAAQC,EAAY,CAAC,IAAD,aAEtB,IADA,IAAMC,EAAS,GACf,MAAmCC,OAAOC,QAAQD,OAAOC,QAAQJ,IAAjE,eAAyE,CAAC,IAAD,4CAA1DK,EAA0D,KAAjDC,EAAiD,KACvE,OAAQD,GACN,IAAK,SACkB,kBAAVC,GACTJ,EAAOK,KACL,kBAACV,EAAD,iBACMS,EADN,CAEEE,IAAK,EAAKV,MAAMW,OAChBC,YAAa,EAAKZ,MAAMY,YACxBC,iBAAkB,EAAKb,MAAMa,iBAC7BC,mBAAoB,EAAKd,MAAMc,mBAC/BC,OAAQZ,EACRa,cAAc,aAIpB,MACF,IAAK,QACFR,EAAaS,SAAQ,SAACV,GACrBH,EAAOK,KACL,kBAACV,EAAD,iBACMQ,EADN,CAEEG,IAAK,EAAKV,MAAMW,OAChBC,YAAa,EAAKZ,MAAMY,YACxBC,iBAAkB,EAAKb,MAAMa,iBAC7BC,mBAAoB,EAAKd,MAAMc,mBAC/BC,OAAQZ,EACRa,cAAc,eAIpB,MACF,IAAK,YACFR,EAAaS,SAAQ,SAACV,GACrBH,EAAOK,KACL,kBAACV,EAAD,iBACMQ,EADN,CAEEG,IAAK,EAAKV,MAAMW,OAChBI,OAAQZ,EACRa,cAAc,mBAIpB,MACF,QACEZ,EAAOK,KAAK,kBAAC,IAAMS,SAAP,kBAIlB,MAAM,CAAN,EAAOd,GAnDe,uCApBF,EA2ExBe,QAAU,SAACC,GACT,GAAiC,cAA7B,EAAKpB,MAAMgB,cACb,GAAK,EAAKK,MAAMnB,KAQd,EAAKoB,SAAS,CAAEpB,MAAM,QARF,CACpB,IAAME,EAAS,EAAKJ,MAAMc,mBAAmBM,GACxChB,EAGH,EAAKkB,SAAS,CAAEpB,KAAME,IAFtB,EAAKmB,YAAYH,KA9EvB,EAAKC,MAAQ,CAAEnB,MAAM,GAFC,EAD1B,wDAMcsB,GAAmB,IAAD,OAC5B,MAAO,YAAMA,IACVC,MAAK,SAAAC,GACJ,IAAMC,EAAaC,KAAKC,UAAUH,EAASI,OAAOC,OAC5CC,EAAaJ,KAAKC,UAAUH,EAASI,QAC3C,EAAK9B,MAAMa,iBAAiBc,EAAYK,GACxC,EAAKV,SAAS,CAAEpB,KAAMwB,EAASI,OAAOG,YAEvCC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZG,MAAM,gCAhBd,+BA2FY,IAAD,OACP,OACE,kBAAC,IAAMpB,SAAP,KACE,yBACER,IAAK6B,KAAKvC,MAAMW,OAChB6B,UAAS,UAAKD,KAAKvC,MAAMgB,cAAhB,0BAELuB,KAAKlB,MAAMnB,KAAX,UACOqC,KAAKvC,MAAMgB,cADlB,oBAEOuB,KAAKvC,MAAMgB,cAFlB,aAIJyB,MAAO,CAAEC,WAAYH,KAAKvC,MAAMe,QAChCI,QAAS,WACP,EAAKA,QACH,EAAKnB,MAAM2C,MAAMC,UAAU,EAAG,EAAK5C,MAAM2C,MAAME,WAIlDN,KAAKvC,MAAM8C,cAEbP,KAAKlB,MAAMnB,MACV,yBAAKuC,MAAOF,KAAKvC,MAAMe,QAAU,CAAE2B,WAAY,KAC5CH,KAAKtC,cAAcsC,KAAKlB,MAAMnB,KAAM,UAjHjD,GAA8B6C,cAyHfhD,a,gCC7Hf,2DAKAiD,IAASC,OAAO,kBAAC,UAAD,MAASC,SAASC,eAAe,SAKjDC,gB,uICNaC,EAAb,uKAEI,OAAO,kBAAC,UAASC,eAFrB,GAAyBC,IAAMR,WAMhBM,a,uICNFG,EAAb,kDACE,WAAYxD,GAAa,IAAD,8BACtB,cAAMA,IAIRuB,YAAc,SAACC,GACb,MAAO,YAAMA,IAAYC,MAAK,SAAAC,GAC5B,EAAKJ,SAAS,CAAEpB,KAAMwB,EAASI,OAAOG,SACtC,IAAMN,EAAaC,KAAKC,UAAUH,EAAQ,OAAR,OAC5BM,EAAaJ,KAAKC,UAAUH,EAASI,QAC3C,EAAK9B,MAAMa,iBAAiBc,EAAYK,OAVpB,EAcxB/B,cAAgB,SAACC,GACf,GAAIA,EAAM,CAAC,IAAD,aAER,IADA,IAAME,EAAS,GACf,MAAmCC,OAAOC,QAAQD,OAAOC,QAAQJ,IAAjE,eAAyE,CAAC,IAAD,4CAA1DK,EAA0D,KAAjDC,EAAiD,KACvD,WAAZD,EACmB,kBAAVC,GAAsBA,GAC/BJ,EAAOK,KACL,kBAAC,UAAD,iBACMD,EADN,CAEEI,YAAa,EAAKS,MAAMT,YACxBC,iBAAkB,EAAKb,MAAMa,iBAC7BC,mBAAoB,EAAKd,MAAMc,mBAC/BE,cAAc,aAIC,UAAZT,EACRC,EAAaS,SAAQ,SAACV,GACrBH,EAAOK,KACL,kBAAC,UAAD,iBACMF,EADN,CAEEK,YAAa,EAAKS,MAAMT,YACxBC,iBAAkB,EAAKb,MAAMa,iBAC7BC,mBAAoB,EAAKd,MAAMc,mBAC/BE,cAAc,eAIC,cAAZT,GACRC,EAAaS,SAAQ,SAACV,GACrBH,EAAOK,KAAK,kBAAC,UAAD,iBAAcF,EAAd,CAAuBS,cAAc,mBAIvD,MAAM,CAAN,EAAOZ,GAjCC,uCAbV,EAAKiB,MAAQ,CAAEnB,MAAM,GAFC,EAD1B,gEAsDI,IAAME,EAASmC,KAAKvC,MAAMc,mBAAmB,kBACxCV,EAGHmC,KAAKjB,SAAS,CAAEpB,KAAME,IAFtBmC,KAAKhB,YAAY,yBAxDvB,+BA+DI,OACE,kBAAC,IAAML,SAAP,KAAiBqB,KAAKtC,cAAcsC,KAAKlB,MAAMnB,WAhErD,GAA0B6C,aAqEXS,a,+CChDXC,EAAiB,IAnBnB,aAAe,IAAD,gCADd7C,iBACc,OAGdE,mBAAqB,SAACa,GACpB,IAAM+B,EAAmB9B,KAAKC,UAAUF,GAClCgC,EAAU,EAAK/C,YAA2B8C,GAChD,QAAKC,GAGgB/B,KAAKgC,MAAMD,GACZ1B,QAVR,KAcdpB,iBAAmB,SAACgD,EAAmBC,GACpC,EAAKlD,YAA2BiD,GAAaC,GAd9CvB,KAAK3B,YAAc,IAoBR6C,a,6BC3Bf,2FAYA,IAAMM,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DASC,SAASC,EAASC,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIC,IACpBC,aACAR,OAAOC,SAASQ,MAEJC,SAAWV,OAAOC,SAASS,OAIvC,OAGFV,OAAOW,iBAAiB,QAAQ,WAC9B,IAAMC,EAAK,UAAMJ,aAAN,sBAEPV,IAgEV,SAAiCc,EAAeP,GAE9CQ,MAAMD,EAAO,CACXE,QAAS,CAAE,iBAAkB,YAE5BtD,MAAK,SAAAC,GAEJ,IAAMsD,EAActD,EAASqD,QAAQE,IAAI,gBAEnB,MAApBvD,EAASwD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CZ,UAAUnB,cAAcgC,MAAM3D,MAAK,SAAA4D,GACjCA,EAAaC,aAAa7D,MAAK,WAC7BwC,OAAOC,SAASqB,eAKpBC,EAAgBX,EAAOP,MAG1BpC,OAAM,WACLE,QAAQC,IACN,oEAvFAoD,CAAwBZ,EAAOP,GAI/BC,UAAUnB,cAAcgC,MAAM3D,MAAK,WACjCW,QAAQC,IACN,iHAMJmD,EAAgBX,EAAOP,OAM/B,SAASkB,EAAgBX,EAAeP,GACtCC,UAAUnB,cACPiB,SAASQ,GACTpD,MAAK,SAAA4D,GACJA,EAAaK,cAAgB,WAC3B,IAAMC,EAAmBN,EAAaO,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBtE,QACfkD,UAAUnB,cAAc0C,YAI1B1D,QAAQC,IACN,iHAKEiC,GAAUA,EAAOyB,UACnBzB,EAAOyB,SAASV,KAMlBjD,QAAQC,IAAI,sCAGRiC,GAAUA,EAAO0B,WACnB1B,EAAO0B,UAAUX,WAO5BnD,OAAM,SAAAC,GACLC,QAAQD,MAAM,4CAA6CA,MAkC1D,SAASmD,IACV,kBAAmBf,WACrBA,UAAUnB,cAAcgC,MAAM3D,MAAK,SAAA4D,GACjCA,EAAaC,kB,oCC7InB,IAAIW,EAAM,CACT,KAAM,CACL,EACA,GAED,QAAS,CACR,EACA,GAED,aAAc,CACb,GACA,EACA,EACA,GAED,iBAAkB,CACjB,GACA,EACA,EACA,GAED,YAAa,CACZ,EACA,GAED,mBAAoB,CACnB,GACA,EACA,GAED,wBAAyB,CACxB,GACA,EACA,GAED,qBAAsB,CACrB,GACA,EACA,GAED,0BAA2B,CAC1B,GACA,EACA,GAED,mBAAoB,CACnB,GACA,EACA,GAED,wBAAyB,CACxB,GACA,EACA,GAED,UAAW,CACV,GACA,EACA,IAED,eAAgB,CACf,GACA,EACA,IAED,oBAAqB,CACpB,EACA,GAED,wBAAyB,CACxB,EACA,GAED,wBAAyB,CACxB,EACA,GAED,4BAA6B,CAC5B,EACA,GAED,8BAA+B,CAC9B,GACA,EACA,IAED,6BAA8B,CAC7B,GACA,EACA,IAED,4BAA6B,CAC5B,GACA,EACA,IAED,gCAAiC,CAChC,GACA,EACA,GAED,mCAAoC,CACnC,GACA,EACA,GAED,8BAA+B,CAC9B,GACA,GAED,sBAAuB,CACtB,GACA,GAED,yBAA0B,CACzB,GACA,GAED,UAAW,CACV,EACA,GAED,cAAe,CACd,EACA,GAED,oBAAqB,CACpB,GACA,EACA,GAED,uBAAwB,CACvB,GACA,EACA,GAED,kBAAmB,CAClB,GACA,GAED,qBAAsB,CACrB,GACA,GAED,eAAgB,CACf,GACA,EACA,EACA,GAED,kBAAmB,CAClB,GACA,EACA,EACA,GAED,qBAAsB,CACrB,GACA,EACA,GAED,wBAAyB,CACxB,GACA,EACA,IAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAU9E,MAAK,WAC7B,IAAI+E,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMV,EAAIE,GAAMS,EAAKD,EAAI,GAC7B,OAAOL,QAAQO,IAAIF,EAAIG,MAAM,GAAGb,IAAIG,EAAoBI,IAAI/E,MAAK,WAChE,OAAO2E,EAAoBW,EAAEH,EAAID,EAAI,OAGvCT,EAAoBc,KAAO,WAC1B,OAAO3G,OAAO2G,KAAKf,IAEpBC,EAAoBU,GAAK,GACzBK,EAAOC,QAAUhB,G","file":"static/js/main.d0cada7b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport storeInterface from \"../storeInterface\";\r\nimport \"./styles/App.css\";\r\n\r\nexport class TreeNode extends Component<any, any> implements storeInterface {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = { data: false };\r\n  }\r\n\r\n  fetchEntity(filename: string) {\r\n    import(`../${filename}`)\r\n      .then(response => {\r\n        const entityName = JSON.stringify(response.Entity._Name);\r\n        const entityData = JSON.stringify(response.Entity);\r\n        this.props.addToGlobalStore(entityName, entityData);\r\n        this.setState({ data: response.Entity.Fields });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        alert(\"no data for this entity\");\r\n      });\r\n  }\r\n\r\n  renderCurrent = (data: any, marginData: number) => {\r\n    if (data && marginData) {\r\n      const result = [];\r\n      for (const [, [element, value]] of Object.entries(Object.entries(data))) {\r\n        switch (element) {\r\n          case \"Parent\":\r\n            if (typeof value === \"object\") {\r\n              result.push(\r\n                <TreeNode\r\n                  {...value}\r\n                  key={this.props._Index}\r\n                  globalStore={this.props.globalStore}\r\n                  addToGlobalStore={this.props.addToGlobalStore}\r\n                  getFromGlobalStore={this.props.getFromGlobalStore}\r\n                  margin={marginData}\r\n                  componentType=\"parent\"\r\n                />\r\n              );\r\n            }\r\n            break;\r\n          case \"Child\":\r\n            (value as []).forEach((element: object) => {\r\n              result.push(\r\n                <TreeNode\r\n                  {...element}\r\n                  key={this.props._Index}\r\n                  globalStore={this.props.globalStore}\r\n                  addToGlobalStore={this.props.addToGlobalStore}\r\n                  getFromGlobalStore={this.props.getFromGlobalStore}\r\n                  margin={marginData}\r\n                  componentType=\"child\"\r\n                />\r\n              );\r\n            });\r\n            break;\r\n          case \"Attribute\":\r\n            (value as []).forEach((element: object) => {\r\n              result.push(\r\n                <TreeNode\r\n                  {...element}\r\n                  key={this.props._Index}\r\n                  margin={marginData}\r\n                  componentType=\"attribute\"\r\n                />\r\n              );\r\n            });\r\n            break;\r\n          default:\r\n            result.push(<React.Fragment>unknown</React.Fragment>);\r\n            break;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  };\r\n\r\n  onClick = (name: string) => {\r\n    if (this.props.componentType !== \"attribute\") {\r\n      if (!this.state.data) {\r\n        const result = this.props.getFromGlobalStore(name);\r\n        if (!result) {\r\n          this.fetchEntity(name);\r\n        } else {\r\n          this.setState({ data: result });\r\n        }\r\n      } else {\r\n        this.setState({ data: false });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div\r\n          key={this.props._Index}\r\n          className={`${this.props.componentType} \r\n            ${\r\n              this.state.data\r\n                ? `${this.props.componentType}--open`\r\n                : `${this.props.componentType}--closed`\r\n            }`}\r\n          style={{ marginLeft: this.props.margin }}\r\n          onClick={() => {\r\n            this.onClick(\r\n              this.props._Type.substring(6, this.props._Type.length)\r\n            );\r\n          }}\r\n        >\r\n          {this.props._Description}\r\n        </div>\r\n        {this.state.data && (\r\n          <div style={this.props.margin && { marginLeft: 10 }}>\r\n            {this.renderCurrent(this.state.data, 10)}\r\n          </div>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TreeNode;\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport App from \"./App\"\r\nimport * as serviceWorker from \"./serviceWorker\"\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","import React from \"react\";\r\nimport Tree from \"./components/Tree\";\r\nimport globalStoreObject from \"./globalStoreObject\";\r\n\r\nexport class App extends React.Component {\r\n  render() {\r\n    return <Tree {...globalStoreObject} />;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from \"react\";\r\nimport storeInterface from \"../storeInterface\";\r\nimport TreeNode from \"./TreeNode\";\r\n\r\nexport class Tree extends Component<any, any> implements storeInterface {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = { data: false };\r\n  }\r\n\r\n  fetchEntity = (filename: string) => {\r\n    import(`../${filename}`).then(response => {\r\n      this.setState({ data: response.Entity.Fields });\r\n      const entityName = JSON.stringify(response[\"Entity\"][\"_Name\"]);\r\n      const entityData = JSON.stringify(response.Entity);\r\n      this.props.addToGlobalStore(entityName, entityData);\r\n    });\r\n  };\r\n\r\n  renderCurrent = (data: any) => {\r\n    if (data) {\r\n      const result = [];\r\n      for (const [, [element, value]] of Object.entries(Object.entries(data))) {\r\n        if (element === \"Parent\") {\r\n          if (typeof value === \"object\" && value) {\r\n            result.push(\r\n              <TreeNode\r\n                {...value}\r\n                globalStore={this.state.globalStore}\r\n                addToGlobalStore={this.props.addToGlobalStore}\r\n                getFromGlobalStore={this.props.getFromGlobalStore}\r\n                componentType=\"parent\"\r\n              />\r\n            );\r\n          }\r\n        } else if (element === \"Child\") {\r\n          (value as []).forEach((element: object) => {\r\n            result.push(\r\n              <TreeNode\r\n                {...element}\r\n                globalStore={this.state.globalStore}\r\n                addToGlobalStore={this.props.addToGlobalStore}\r\n                getFromGlobalStore={this.props.getFromGlobalStore}\r\n                componentType=\"child\"\r\n              />\r\n            );\r\n          });\r\n        } else if (element === \"Attribute\") {\r\n          (value as []).forEach((element: object) => {\r\n            result.push(<TreeNode {...element} componentType=\"attribute\" />);\r\n          });\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  };\r\n\r\n  public componentDidMount() {\r\n    const result = this.props.getFromGlobalStore(\"GENERIC_REPORT\");\r\n    if (!result) {\r\n      this.fetchEntity(\"GENERIC_REPORT.json\");\r\n    } else {\r\n      this.setState({ data: result });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>{this.renderCurrent(this.state.data)}</React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tree;\r\n","export interface IIndexable {\r\n  [key: string]: any;\r\n}\r\n\r\nclass globalStoreObject implements IIndexable {\r\n  globalStore: object;\r\n  constructor() {\r\n    this.globalStore = {};\r\n  }\r\n  getFromGlobalStore = (entityName: string) => {\r\n    const stringEntityName = JSON.stringify(entityName);\r\n    const entity = (this.globalStore as IIndexable)[stringEntityName];\r\n    if (!entity) {\r\n      return false;\r\n    } else {\r\n      const parsedData = JSON.parse(entity);\r\n      return parsedData.Fields;\r\n    }\r\n  };\r\n\r\n  addToGlobalStore = (childName: string, childData: string) => {\r\n    (this.globalStore as IIndexable)[childName] = childData;\r\n  };\r\n}\r\n\r\nlet globalStoreObj = new globalStoreObject();\r\n\r\nexport default globalStoreObj;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","var map = {\n\t\"./\": [\n\t\t7,\n\t\t9\n\t],\n\t\"./App\": [\n\t\t8,\n\t\t9\n\t],\n\t\"./App.test\": [\n\t\t17,\n\t\t9,\n\t\t0,\n\t\t2\n\t],\n\t\"./App.test.tsx\": [\n\t\t17,\n\t\t9,\n\t\t0,\n\t\t2\n\t],\n\t\"./App.tsx\": [\n\t\t8,\n\t\t9\n\t],\n\t\"./GENERATOR_LINK\": [\n\t\t18,\n\t\t3,\n\t\t7\n\t],\n\t\"./GENERATOR_LINK.json\": [\n\t\t18,\n\t\t3,\n\t\t7\n\t],\n\t\"./GENERATOR_PARAMS\": [\n\t\t19,\n\t\t3,\n\t\t8\n\t],\n\t\"./GENERATOR_PARAMS.json\": [\n\t\t19,\n\t\t3,\n\t\t8\n\t],\n\t\"./GENERIC_REPORT\": [\n\t\t20,\n\t\t3,\n\t\t9\n\t],\n\t\"./GENERIC_REPORT.json\": [\n\t\t20,\n\t\t3,\n\t\t9\n\t],\n\t\"./GROUP\": [\n\t\t21,\n\t\t3,\n\t\t10\n\t],\n\t\"./GROUP.json\": [\n\t\t21,\n\t\t3,\n\t\t10\n\t],\n\t\"./components/Tree\": [\n\t\t9,\n\t\t9\n\t],\n\t\"./components/Tree.tsx\": [\n\t\t9,\n\t\t9\n\t],\n\t\"./components/TreeNode\": [\n\t\t3,\n\t\t9\n\t],\n\t\"./components/TreeNode.tsx\": [\n\t\t3,\n\t\t9\n\t],\n\t\"./components/img/button.svg\": [\n\t\t30,\n\t\t7,\n\t\t14\n\t],\n\t\"./components/img/minus.svg\": [\n\t\t31,\n\t\t7,\n\t\t15\n\t],\n\t\"./components/img/plus.svg\": [\n\t\t32,\n\t\t7,\n\t\t16\n\t],\n\t\"./components/storeInterface.d\": [\n\t\t22,\n\t\t7,\n\t\t3\n\t],\n\t\"./components/storeInterface.d.ts\": [\n\t\t22,\n\t\t7,\n\t\t3\n\t],\n\t\"./components/styles/App.css\": [\n\t\t14,\n\t\t7\n\t],\n\t\"./globalStoreObject\": [\n\t\t10,\n\t\t9\n\t],\n\t\"./globalStoreObject.ts\": [\n\t\t10,\n\t\t9\n\t],\n\t\"./index\": [\n\t\t7,\n\t\t9\n\t],\n\t\"./index.tsx\": [\n\t\t7,\n\t\t9\n\t],\n\t\"./react-app-env.d\": [\n\t\t23,\n\t\t7,\n\t\t4\n\t],\n\t\"./react-app-env.d.ts\": [\n\t\t23,\n\t\t7,\n\t\t4\n\t],\n\t\"./serviceWorker\": [\n\t\t11,\n\t\t9\n\t],\n\t\"./serviceWorker.ts\": [\n\t\t11,\n\t\t9\n\t],\n\t\"./setupTests\": [\n\t\t24,\n\t\t9,\n\t\t1,\n\t\t5\n\t],\n\t\"./setupTests.ts\": [\n\t\t24,\n\t\t9,\n\t\t1,\n\t\t5\n\t],\n\t\"./storeInterface.d\": [\n\t\t25,\n\t\t7,\n\t\t6\n\t],\n\t\"./storeInterface.d.ts\": [\n\t\t25,\n\t\t7,\n\t\t6\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(2).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__.t(id, ids[1])\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 15;\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}