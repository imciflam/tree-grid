{"version":3,"sources":["components/TreeListItem.tsx","components/TreeList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TreeListItem","props","state","showPopup","itemChildData","id","console","log","axios","get","then","response","childData","data","setState","catch","error","className","this","parentId","onClick","getChildren","name","map","element","key","Component","TreeList","item","App","fetchedData","forEach","push","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kSA0DeA,EAtDf,YACE,WAAmBC,GAAa,IAAD,8BAC7B,4CAAMA,KACDC,MAAQ,CACXC,WAAW,EACXC,cAAe,IAJY,EADjC,yEASqBC,GAAa,IAAD,OAC7BC,QAAQC,IAAIF,GAEZG,IACGC,IADH,+DAC+DJ,IAC5DK,MAAK,SAAAC,GACJ,IAAMC,EAAYD,EAASE,KAC3BP,QAAQC,IAAIK,GACZ,EAAKE,SAAS,CACZX,WAAY,EAAKD,MAAMC,UACvBC,cAAeQ,OAGlBG,OAAM,SAACC,GACNV,QAAQC,IAAIS,QAvBpB,+BA2BY,IAAD,OACP,OACE,yBAAKC,UAAU,mBACW,MAAvBC,KAAKjB,MAAMkB,SACV,4BAAQC,QAAS,kBAAM,EAAKC,YAAY,EAAKpB,MAAMI,MAAnD,KAEA,GAEF,0BAAMY,UAAU,mBAAmBC,KAAKjB,MAAMqB,MAC7CJ,KAAKhB,MAAMC,WAAae,KAAKhB,MAAME,cAChCc,KAAKhB,MAAME,cAAcmB,KAAI,SAACC,GAC5B,OACE,kBAACxB,EAAD,CACEiB,UAAU,kBACVQ,IAAKD,EAAQnB,GACbA,GAAImB,EAAQnB,GACZiB,KAAME,EAAQF,KACdH,SAAUK,EAAQL,cAIxB,QAhDZ,GAAkCO,aCmBnBC,G,MAnBf,iLAEI,IAAMd,EAAOK,KAAKjB,MAAMY,KACxB,OACE,yBAAKI,UAAU,wBACZJ,EAAKU,KAAI,SAACK,GAAD,OACR,kBAAC,EAAD,CACEX,UAAU,kBACVQ,IAAKG,EAAKvB,GACVA,GAAIuB,EAAKvB,GACTiB,KAAMM,EAAKN,KACXH,SAAUS,EAAKT,mBAX3B,GAA8BO,cCgCfG,EAhCf,YACE,WAAY5B,GAAa,IAAD,8BACtB,4CAAMA,KACDC,MAAQ,CAAEW,KAAM,IAFC,EAD1B,iFAK8B,IAAD,OACzBL,IACGC,IAAI,wDACJC,MAAK,SAAAC,GACJ,IAAMmB,EAAqB,GAC3BnB,EAASE,KAAKkB,SAAQ,SAACP,GACI,OAArBA,EAAQL,UACVW,EAAYE,KAAKR,MAIrB,EAAKV,SAAS,CAAED,KAAMiB,OAEvBf,OAAM,SAACC,GACNV,QAAQC,IAAIS,QAnBpB,+BAwBI,OADAV,QAAQC,IAAIW,KAAKhB,OAEf,kBAAC,IAAM+B,SAAP,KACE,kBAAC,EAAD,CAAUhB,UAAU,YAAYJ,KAAMK,KAAKhB,MAAMW,YA1BzD,GAAyBa,aCQLQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDsI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,kB","file":"static/js/main.d784711b.chunk.js","sourcesContent":["import React, { Component } from \"react\"\r\nimport \"./TreeListItem.css\"\r\nimport axios from \"axios\"\r\n\r\nexport class TreeListItem extends Component<any, any> {\r\n  public constructor(props: any) {\r\n    super(props)\r\n    this.state = {\r\n      showPopup: false,\r\n      itemChildData: []\r\n    }\r\n  }\r\n\r\n  public getChildren(id: number) {\r\n    console.log(id)\r\n    //get elements for which current id == parent id\r\n    axios\r\n      .get(`https://5e4a36256eafb7001488c115.mockapi.io/elements/${id}`)\r\n      .then(response => {\r\n        const childData = response.data\r\n        console.log(childData)\r\n        this.setState({\r\n          showPopup: !this.state.showPopup,\r\n          itemChildData: childData\r\n        })\r\n      })\r\n      .catch((error: any) => {\r\n        console.log(error)\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='tree-list__item'>\r\n        {this.props.parentId == null ? (\r\n          <button onClick={() => this.getChildren(this.props.id)}>></button>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <span className='tree-list__text'>{this.props.name}</span>\r\n        {this.state.showPopup && this.state.itemChildData\r\n          ? this.state.itemChildData.map((element: any) => {\r\n              return (\r\n                <TreeListItem\r\n                  className='tree-list__item'\r\n                  key={element.id}\r\n                  id={element.id}\r\n                  name={element.name}\r\n                  parentId={element.parentId}\r\n                />\r\n              )\r\n            })\r\n          : \"\"}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TreeListItem\r\n","import React, { Component } from \"react\"\r\nimport TreeListItem from \"./TreeListItem\"\r\nimport \"./TreeList.css\"\r\n\r\nexport class TreeList extends Component<any, any> {\r\n  render() {\r\n    const data = this.props.data\r\n    return (\r\n      <div className='tree-list__container'>\r\n        {data.map((item: any) => (\r\n          <TreeListItem\r\n            className='tree-list__item'\r\n            key={item.id}\r\n            id={item.id}\r\n            name={item.name}\r\n            parentId={item.parentId}\r\n          />\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TreeList\r\n","import React, { Component } from \"react\"\r\nimport TreeList from \"./components/TreeList\"\r\nimport axios from \"axios\"\r\n\r\nexport class App extends Component<any, any> {\r\n  constructor(props: any) {\r\n    super(props)\r\n    this.state = { data: [] }\r\n  }\r\n  public componentDidMount() {\r\n    axios\r\n      .get(\"https://5e4a36256eafb7001488c115.mockapi.io/elements\")\r\n      .then(response => {\r\n        const fetchedData: any[] = []\r\n        response.data.forEach((element: any) => {\r\n          if (element.parentId === null) {\r\n            fetchedData.push(element)\r\n          }\r\n        })\r\n\r\n        this.setState({ data: fetchedData })\r\n      })\r\n      .catch((error: any) => {\r\n        console.log(error)\r\n      })\r\n  }\r\n  render() {\r\n    console.log(this.state)\r\n    return (\r\n      <React.Fragment>\r\n        <TreeList className='tree-list' data={this.state.data} />\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}